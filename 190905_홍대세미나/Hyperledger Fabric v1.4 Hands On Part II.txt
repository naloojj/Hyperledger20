byfn (build your firat network)
https://hyperledger-fabric.readthedocs.io/en/release-1.4/build_network.html?highlight=my%20first%20network

sudo su

gedit /etc/profile
export FABRIC_CFG_PATH=$FABRIC_HOME/fabric-samples/first-network
source /etc/profile
(echo 'export FABRIC_CFG_PATH=$FABRIC_HOME/fabric-samples/first-network' >> ~/.profile
source ~/.profile)
cd $FABRIC_CFG_PATH
Delete the previously running dockers
docker rm -f $(docker ps -aq)

#./byfn.sh generate

Generating crypto keys and certificates
generate keys and certificates for every organization and its associated entities like peers and orderer to sign/verify for communicating over the network
creat a new directory crypto-config in which there are directories that correspond to ordererOrganizations and peerOrganizations

cryptogen generate --config=./crypto-config.yaml
root@fabric-VirtualBox:/home/fabric/fabric-samples/first-network# cryptogen generate --config=./crypto-config.yaml
org1.example.com
org2.example.com
*generates the x.509 based crypto files/cryptogen tool reads the crypto-config.yaml file to generate the certificates/crypto-config.yaml file depicts network topology

gedit crypto-config.yaml
OrdererOrgs:
  - Name: Orderer
    Domain: example.com
    Specs:
      - Hostname: orderer
PeerOrgs:
  - Name: Org1
    Domain: org1.example.com
    EnableNodeOUs: true
    Template:
      Count: 2
    Users:
      Count: 1
  - Name: Org2
    Domain: org2.example.com
    EnableNodeOUs: true
    Template:
      Count: 2
    Users:
      Count: 1

tree crypto-config
crypto-config
+-- ordererOrganizations
¦   +-- example.com
¦       +-- ca
¦       ¦   +-- 528fb0b8f7676e7dc0de7fd7162e635f5f47a9dd6ef731918047dc50192e9f51_sk
¦       ¦   +-- ca.example.com-cert.pem
¦       +-- msp
¦       ¦   +-- admincerts
¦       ¦   ¦   +-- Admin@example.com-cert.pem
¦       ¦   +-- cacerts
¦       ¦   ¦   +-- ca.example.com-cert.pem
¦       ¦   +-- tlscacerts
¦       ¦       +-- tlsca.example.com-cert.pem
¦       +-- orderers
¦       ¦   +-- orderer.example.com
¦       ¦       +-- msp
¦       ¦       ¦   +-- admincerts
¦       ¦       ¦   ¦   +-- Admin@example.com-cert.pem
¦       ¦       ¦   +-- cacerts
¦       ¦       ¦   ¦   +-- ca.example.com-cert.pem
¦       ¦       ¦   +-- keystore
¦       ¦       ¦   ¦   +-- 7847057830536afd91a4115a4a6e66c81d58374f685d35477a0c093507d03397_sk
¦       ¦       ¦   +-- signcerts
¦       ¦       ¦   ¦   +-- orderer.example.com-cert.pem
¦       ¦       ¦   +-- tlscacerts
¦       ¦       ¦       +-- tlsca.example.com-cert.pem
¦       ¦       +-- tls
¦       ¦           +-- ca.crt
¦       ¦           +-- server.crt
¦       ¦           +-- server.key
¦       +-- tlsca
¦       ¦   +-- 3a09e8ec3be772ec0f853ca1cb5882617aff51491a68b09db00a599eda9337d5_sk
¦       ¦   +-- tlsca.example.com-cert.pem
¦       +-- users
¦           +-- Admin@example.com
¦               +-- msp
¦               ¦   +-- admincerts
¦               ¦   ¦   +-- Admin@example.com-cert.pem
¦               ¦   +-- cacerts
¦               ¦   ¦   +-- ca.example.com-cert.pem
¦               ¦   +-- keystore
¦               ¦   ¦   +-- 724bcacbbb3ddf6fab9f1b9362fb1dd202c815f1392cd1211f6859d1f29d72de_sk
¦               ¦   +-- signcerts
¦               ¦   ¦   +-- Admin@example.com-cert.pem
¦               ¦   +-- tlscacerts
¦               ¦       +-- tlsca.example.com-cert.pem
¦               +-- tls
¦                   +-- ca.crt
¦                   +-- client.crt
¦                   +-- client.key
+-- peerOrganizations
    +-- org1.example.com
    ¦   +-- ca
    ¦   ¦   +-- ada6f3c0b8a685d7d587a62ac465f0d5ec1a092a563e7286f0a20118da982724_sk
    ¦   ¦   +-- ca.org1.example.com-cert.pem
    ¦   +-- msp
    ¦   ¦   +-- admincerts
    ¦   ¦   ¦   +-- Admin@org1.example.com-cert.pem
    ¦   ¦   +-- cacerts
    ¦   ¦   ¦   +-- ca.org1.example.com-cert.pem
    ¦   ¦   +-- config.yaml
    ¦   ¦   +-- tlscacerts
    ¦   ¦       +-- tlsca.org1.example.com-cert.pem
    ¦   +-- peers
    ¦   ¦   +-- peer0.org1.example.com
    ¦   ¦   ¦   +-- msp
    ¦   ¦   ¦   ¦   +-- admincerts
    ¦   ¦   ¦   ¦   ¦   +-- Admin@org1.example.com-cert.pem
    ¦   ¦   ¦   ¦   +-- cacerts
    ¦   ¦   ¦   ¦   ¦   +-- ca.org1.example.com-cert.pem
    ¦   ¦   ¦   ¦   +-- config.yaml
    ¦   ¦   ¦   ¦   +-- keystore
    ¦   ¦   ¦   ¦   ¦   +-- 78c1016f4f2a164ce875e60e8b52033329699293e0ce74799f17abee02bbf23b_sk
    ¦   ¦   ¦   ¦   +-- signcerts
    ¦   ¦   ¦   ¦   ¦   +-- peer0.org1.example.com-cert.pem
    ¦   ¦   ¦   ¦   +-- tlscacerts
    ¦   ¦   ¦   ¦       +-- tlsca.org1.example.com-cert.pem
    ¦   ¦   ¦   +-- tls
    ¦   ¦   ¦       +-- ca.crt
    ¦   ¦   ¦       +-- server.crt
    ¦   ¦   ¦       +-- server.key
    ¦   ¦   +-- peer1.org1.example.com
    ¦   ¦       +-- msp
    ¦   ¦       ¦   +-- admincerts
    ¦   ¦       ¦   ¦   +-- Admin@org1.example.com-cert.pem
    ¦   ¦       ¦   +-- cacerts
    ¦   ¦       ¦   ¦   +-- ca.org1.example.com-cert.pem
    ¦   ¦       ¦   +-- config.yaml
    ¦   ¦       ¦   +-- keystore
    ¦   ¦       ¦   ¦   +-- e4a9c85ffeb020885fe51519dc4c0872bcf3a7142f65457b50cb29fb8ba13c98_sk
    ¦   ¦       ¦   +-- signcerts
    ¦   ¦       ¦   ¦   +-- peer1.org1.example.com-cert.pem
    ¦   ¦       ¦   +-- tlscacerts
    ¦   ¦       ¦       +-- tlsca.org1.example.com-cert.pem
    ¦   ¦       +-- tls
    ¦   ¦           +-- ca.crt
    ¦   ¦           +-- server.crt
    ¦   ¦           +-- server.key
    ¦   +-- tlsca
    ¦   ¦   +-- 1a5dda1469fcfe310d95d7037f74315ba2e2815fcaf5380e58d79bfd0d646ee2_sk
    ¦   ¦   +-- tlsca.org1.example.com-cert.pem
    ¦   +-- users
    ¦       +-- Admin@org1.example.com
    ¦       ¦   +-- msp
    ¦       ¦   ¦   +-- admincerts
    ¦       ¦   ¦   ¦   +-- Admin@org1.example.com-cert.pem
    ¦       ¦   ¦   +-- cacerts
    ¦       ¦   ¦   ¦   +-- ca.org1.example.com-cert.pem
    ¦       ¦   ¦   +-- keystore
    ¦       ¦   ¦   ¦   +-- ae934c0b26dd44609b26d98a29c8acd9b095f1f0b3e0a9119ce4e93a07e59ba7_sk
    ¦       ¦   ¦   +-- signcerts
    ¦       ¦   ¦   ¦   +-- Admin@org1.example.com-cert.pem
    ¦       ¦   ¦   +-- tlscacerts
    ¦       ¦   ¦       +-- tlsca.org1.example.com-cert.pem
    ¦       ¦   +-- tls
    ¦       ¦       +-- ca.crt
    ¦       ¦       +-- client.crt
    ¦       ¦       +-- client.key
    ¦       +-- User1@org1.example.com
    ¦           +-- msp
    ¦           ¦   +-- admincerts
    ¦           ¦   ¦   +-- User1@org1.example.com-cert.pem
    ¦           ¦   +-- cacerts
    ¦           ¦   ¦   +-- ca.org1.example.com-cert.pem
    ¦           ¦   +-- keystore
    ¦           ¦   ¦   +-- bb732c3bf3a96683769e68317822fecc1bf5d65eeb37cd349f00f7fdb81fcf49_sk
    ¦           ¦   +-- signcerts
    ¦           ¦   ¦   +-- User1@org1.example.com-cert.pem
    ¦           ¦   +-- tlscacerts
    ¦           ¦       +-- tlsca.org1.example.com-cert.pem
    ¦           +-- tls
    ¦               +-- ca.crt
    ¦               +-- client.crt
    ¦               +-- client.key
    +-- org2.example.com
        +-- ca
        ¦   +-- 0563eb830a524e65a47a0f4728f2ee5246dc597ff87f248be4ba7c886659c0f9_sk
        ¦   +-- ca.org2.example.com-cert.pem
        +-- msp
        ¦   +-- admincerts
        ¦   ¦   +-- Admin@org2.example.com-cert.pem
        ¦   +-- cacerts
        ¦   ¦   +-- ca.org2.example.com-cert.pem
        ¦   +-- config.yaml
        ¦   +-- tlscacerts
        ¦       +-- tlsca.org2.example.com-cert.pem
        +-- peers
        ¦   +-- peer0.org2.example.com
        ¦   ¦   +-- msp
        ¦   ¦   ¦   +-- admincerts
        ¦   ¦   ¦   ¦   +-- Admin@org2.example.com-cert.pem
        ¦   ¦   ¦   +-- cacerts
        ¦   ¦   ¦   ¦   +-- ca.org2.example.com-cert.pem
        ¦   ¦   ¦   +-- config.yaml
        ¦   ¦   ¦   +-- keystore
        ¦   ¦   ¦   ¦   +-- 04f613cae0143b6e895f023db3ab32444a1c58793af8f4f46bce4d6b79bafeb1_sk
        ¦   ¦   ¦   +-- signcerts
        ¦   ¦   ¦   ¦   +-- peer0.org2.example.com-cert.pem
        ¦   ¦   ¦   +-- tlscacerts
        ¦   ¦   ¦       +-- tlsca.org2.example.com-cert.pem
        ¦   ¦   +-- tls
        ¦   ¦       +-- ca.crt
        ¦   ¦       +-- server.crt
        ¦   ¦       +-- server.key
        ¦   +-- peer1.org2.example.com
        ¦       +-- msp
        ¦       ¦   +-- admincerts
        ¦       ¦   ¦   +-- Admin@org2.example.com-cert.pem
        ¦       ¦   +-- cacerts
        ¦       ¦   ¦   +-- ca.org2.example.com-cert.pem
        ¦       ¦   +-- config.yaml
        ¦       ¦   +-- keystore
        ¦       ¦   ¦   +-- 476ba830ee4017983c7036d33645e311a0689c7bbac500c0ef458bfae73620d7_sk
        ¦       ¦   +-- signcerts
        ¦       ¦   ¦   +-- peer1.org2.example.com-cert.pem
        ¦       ¦   +-- tlscacerts
        ¦       ¦       +-- tlsca.org2.example.com-cert.pem
        ¦       +-- tls
        ¦           +-- ca.crt
        ¦           +-- server.crt
        ¦           +-- server.key
        +-- tlsca
        ¦   +-- 77eb1e0edb11171b7bd89137c6f1ba736e0d0071d0ac9c8b18e6a0dab2d2da8d_sk
        ¦   +-- tlsca.org2.example.com-cert.pem
        +-- users
            +-- Admin@org2.example.com
            ¦   +-- msp
            ¦   ¦   +-- admincerts
            ¦   ¦   ¦   +-- Admin@org2.example.com-cert.pem
            ¦   ¦   +-- cacerts
            ¦   ¦   ¦   +-- ca.org2.example.com-cert.pem
            ¦   ¦   +-- keystore
            ¦   ¦   ¦   +-- 2b7844fba5d941449ff7a2b3c0a1af882c1a0703b0ee8eb3e5dd80e2a478d485_sk
            ¦   ¦   +-- signcerts
            ¦   ¦   ¦   +-- Admin@org2.example.com-cert.pem
            ¦   ¦   +-- tlscacerts
            ¦   ¦       +-- tlsca.org2.example.com-cert.pem
            ¦   +-- tls
            ¦       +-- ca.crt
            ¦       +-- client.crt
            ¦       +-- client.key
            +-- User1@org2.example.com
                +-- msp
                ¦   +-- admincerts
                ¦   ¦   +-- User1@org2.example.com-cert.pem
                ¦   +-- cacerts
                ¦   ¦   +-- ca.org2.example.com-cert.pem
                ¦   +-- keystore
                ¦   ¦   +-- 950d2a13df01b7459257f50840c526189922469975e887d07fb67bc8a2a971a1_sk
                ¦   +-- signcerts
                ¦   ¦   +-- User1@org2.example.com-cert.pem
                ¦   +-- tlscacerts
                ¦       +-- tlsca.org2.example.com-cert.pem
                +-- tls
                    +-- ca.crt
                    +-- client.crt
                    +-- client.key

109 directories, 107 files

Generating transaction configuration 
configtxgen tool generates genesis block & channel transaction configuration using configtx.yaml file:
gedit configtx.yaml 
Profiles:
    TwoOrgsOrdererGenesis:
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *OrdererOrg
            Capabilities:
                <<: *OrdererCapabilities
        Consortiums:
            SampleConsortium:
                Organizations:
                    - *Org1
                    - *Org2
    TwoOrgsChannel:
        Consortium: SampleConsortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *Org1
                - *Org2
            Capabilities:
                <<: *ApplicationCapabilities
Organizations:
    - &OrdererOrg
        Name: OrdererOrg
        ID: OrdererMSP
    - &Org1
        Name: Org1MSP
        ID: Org1MSP
        MSPDir: crypto-config/peerOrganizations/org1.example.com/msp
        AnchorPeers:
            - Host: peer0.org1.example.com
              Port: 7051
    - &Org2
        Name: Org2MSP
        ID: Org2MSP
        MSPDir: crypto-config/peerOrganizations/org2.example.com/msp
        AnchorPeers:
            - Host: peer0.org2.example.com
              Port: 7051
Orderer: &OrdererDefaults
    OrdererType: solo
    Addresses:
        - orderer.example.com:7050
    BatchTimeout: 2s
    BatchSize:
        MaxMessageCount: 10
        AbsoluteMaxBytes: 99 MB
        PreferredMaxBytes: 512 KB
    Kafka:
        Brokers:
            - 127.0.0.1:9092
    Organizations:
Application: &ApplicationDefaults
    Organizations:
Capabilities:
    Global: &ChannelCapabilities
        V1_1: true.
    Orderer: &OrdererCapabilities
        V1_1: true
    Application: &ApplicationCapabilities
        V1_1: true

write the blockchain genesis block
This block will initialize the blockchain network or channel.

configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block
root@fabric-VirtualBox:/home/fabric/fabric-samples/first-network# configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block
2019-07-22 20:17:14.823 EDT [common.tools.configtxgen] main -> WARN 001 Omitting the channel ID for configtxgen for output operations is deprecated.  Explicitly passing the channel ID will be required in the future, defaulting to 'testchainid'.
2019-07-22 20:17:14.823 EDT [common.tools.configtxgen] main -> INFO 002 Loading configuration
2019-07-22 20:17:14.894 EDT [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2019-07-22 20:17:14.894 EDT [common.tools.configtxgen.localconfig] Load -> INFO 004 Loaded configuration: /home/fabric/fabric-samples/first-network/configtx.yaml
2019-07-22 20:17:14.968 EDT [common.tools.configtxgen.localconfig] completeInitialization -> INFO 005 orderer type: solo
2019-07-22 20:17:14.971 EDT [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 006 Loaded configuration: /home/fabric/fabric-samples/first-network/configtx.yaml
2019-07-22 20:17:14.976 EDT [common.tools.configtxgen] doOutputBlock -> INFO 007 Generating genesis block
2019-07-22 20:17:14.976 EDT [common.tools.configtxgen] doOutputBlock -> INFO 008 Writing genesis block

create the first channel transaction
generate channel.tx configuration file and places it in the channel-artifacts folder. 
The file will be used to create the channel.

export CHANNEL_NAME=mychannel
configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME
root@fabric-VirtualBox:/home/fabric/fabric-samples/first-network# export CHANNEL_NAME=mychannel
root@fabric-VirtualBox:/home/fabric/fabric-samples/first-network# configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME
2019-07-22 20:18:35.154 EDT [common.tools.configtxgen] main -> INFO 001 Loading configuration
2019-07-22 20:18:35.241 EDT [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/fabric/fabric-samples/first-network/configtx.yaml
2019-07-22 20:18:35.315 EDT [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2019-07-22 20:18:35.315 EDT [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/fabric/fabric-samples/first-network/configtx.yaml
2019-07-22 20:18:35.315 EDT [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 005 Generating new channel configtx
2019-07-22 20:18:35.324 EDT [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 006 Writing new channel tx

write anchor peer updates
Org1
configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org1MSP
root@fabric-VirtualBox:/home/fabric/fabric-samples/first-network# configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org1MSP
2019-07-22 20:19:28.859 EDT [common.tools.configtxgen] main -> INFO 001 Loading configuration
2019-07-22 20:19:28.950 EDT [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/fabric/fabric-samples/first-network/configtx.yaml
2019-07-22 20:19:29.030 EDT [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2019-07-22 20:19:29.030 EDT [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/fabric/fabric-samples/first-network/configtx.yaml
2019-07-22 20:19:29.030 EDT [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 005 Generating anchor peer update
2019-07-22 20:19:29.030 EDT [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 006 Writing anchor peer update

Org2
root@fabric-VirtualBox:/home/fabric/fabric-samples/first-network# configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org2MSP
2019-07-22 20:21:30.644 EDT [common.tools.configtxgen] main -> INFO 001 Loading configuration
2019-07-22 20:21:30.719 EDT [common.tools.configtxgen.localconfig] Load -> INFO 002 Loaded configuration: /home/fabric/fabric-samples/first-network/configtx.yaml
2019-07-22 20:21:30.791 EDT [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003 orderer type: solo
2019-07-22 20:21:30.793 EDT [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 004 Loaded configuration: /home/fabric/fabric-samples/first-network/configtx.yaml
2019-07-22 20:21:30.793 EDT [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 005 Generating anchor peer update
2019-07-22 20:21:30.793 EDT [common.tools.configtxgen] doOutputAnchorPeersUpdate -> INFO 006 Writing anchor peer update

#./byfn.sh up
gedit byfn.sh

Bring up Docker containers: cli, orderer.example.com, peer0.org1.example.com, peer0.org2.example.com, peer1.org1.example.com, and peer1.org2.example.com
gedit docker-compose-cli.yaml
gedit base/docker-compose-base.yaml
gedit base/peer-base.yaml

Starting of fabric network
docker-compose -f ./docker-compose-cli.yaml up -d 
root@fabric-VirtualBox:/home/fabric/fabric-samples/first-network# docker-compose -f ./docker-compose-cli.yaml up -d
Creating network "net_byfn" with the default driver
Creating volume "net_peer0.org2.example.com" with default driver
Creating volume "net_peer1.org2.example.com" with default driver
Creating volume "net_peer1.org1.example.com" with default driver
Creating volume "net_peer0.org1.example.com" with default driver
Creating volume "net_orderer.example.com" with default driver
Creating peer0.org2.example.com ... done
Creating peer1.org1.example.com ... done
Creating orderer.example.com    ... done
Creating peer1.org2.example.com ... done
Creating peer0.org1.example.com ... done
Creating cli                    ... done

docker ps
root@fabric-VirtualBox:/home/fabric/fabric-samples/first-network# docker ps
CONTAINER ID        IMAGE                               COMMAND             CREATED             STATUS              PORTS                                              NAMES
73aeb8f57556        hyperledger/fabric-tools:latest     "/bin/bash"         45 seconds ago      Up 44 seconds                                                          cli
5d7446df1224        hyperledger/fabric-peer:latest      "peer node start"   47 seconds ago      Up 45 seconds       0.0.0.0:10051->7051/tcp, 0.0.0.0:10053->7053/tcp   peer1.org2.example.com
5939ea403dda        hyperledger/fabric-orderer:latest   "orderer"           47 seconds ago      Up 45 seconds       0.0.0.0:7050->7050/tcp                             orderer.example.com
897b50124de0        hyperledger/fabric-peer:latest      "peer node start"   47 seconds ago      Up 45 seconds       0.0.0.0:7051->7051/tcp, 0.0.0.0:7053->7053/tcp     peer0.org1.example.com
c2085ee6bea0        hyperledger/fabric-peer:latest      "peer node start"   47 seconds ago      Up 46 seconds       0.0.0.0:9051->7051/tcp, 0.0.0.0:9053->7053/tcp     peer0.org2.example.com
2181cfa9c7cb        hyperledger/fabric-peer:latest      "peer node start"   47 seconds ago      Up 46 seconds       0.0.0.0:8051->7051/tcp, 0.0.0.0:8053->7053/tcp     peer1.org1.example.com

Use the peer CLI to set up the network
Accessing CLI Container
docker exec -it cli bash
root@fabric-VirtualBox:/home/fabric/fabric-samples/first-network# docker exec -it cli bash
root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# 

peer version
root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer version
peer:
 Version: 1.4.0
 Commit SHA: d700b43
 Go version: go1.11.1
 OS/Arch: linux/amd64
 Chaincode:
  Base Image Version: 0.4.14
  Base Docker Namespace: hyperledger
  Base Docker Label: org.hyperledger.fabric
  Docker Namespace: hyperledger

create the channel using channel.tx so that peers can join the channel
export CHANNEL_NAME=mychannel
peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
2019-07-23 00:25:24.405 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections initialized
2019-07-23 00:25:24.475 UTC [cli.common] readBlock -> INFO 002 Received block: 0

Joining pears into the channel

for peer0.org1
export CHANNEL_NAME=mychannel
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp  
CORE_PEER_ADDRESS=peer0.org1.example.com:7051 
CORE_PEER_LOCALMSPID="Org1MSP"      
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt  
peer channel join -b mychannel.block
root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer channel join -b mychannel.block
2019-07-23 00:27:46.051 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections initialized
2019-07-23 00:27:46.134 UTC [channelCmd] executeJoin -> INFO 002 Successfully submitted proposal to join channel

for peer0.org2
export CHANNEL_NAME=mychannel
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp  
CORE_PEER_ADDRESS=peer0.org2.example.com:7051 
CORE_PEER_LOCALMSPID="Org2MSP"      
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt  
peer channel join -b mychannel.block
root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer channel join -b mychannel.block
2019-07-23 00:29:21.685 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections initialized
2019-07-23 00:29:21.785 UTC [channelCmd] executeJoin -> INFO 002 Successfully submitted proposal to join channel

for peer1.org1
CHANNEL_NAME=mychannel
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp      
CORE_PEER_ADDRESS=peer1.org1.example.com:7051 
CORE_PEER_LOCALMSPID="Org1MSP"    
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt 
peer channel join -b mychannel.block
root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer channel join -b mychannel.block
2019-07-23 00:30:56.736 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections initialized
2019-07-23 00:30:56.822 UTC [channelCmd] executeJoin -> INFO 002 Successfully submitted proposal to join channel

for peer1.org2
export CHANNEL_NAME=mychannel
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp 
CORE_PEER_ADDRESS=peer1.org2.example.com:7051 
CORE_PEER_LOCALMSPID="Org2MSP" 
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt 
peer channel join -b mychannel.block
root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer channel join -b mychannel.block
2019-07-23 00:32:39.784 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections initialized
2019-07-23 00:32:39.880 UTC [channelCmd] executeJoin -> INFO 002 Successfully submitted proposal to join channel

peer channel list
root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer channel list
2019-07-23 00:33:07.110 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections initialized
Channels peers has joined: 
mychannel

Update the anchor peer on each organization

for peer0.org1
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp 
CORE_PEER_ADDRESS=peer0.org1.example.com:7051 
CORE_PEER_LOCALMSPID="Org1MSP"   
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt 
export CHANNEL_NAME=mychannel
peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org1MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org1MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
2019-07-23 00:35:00.871 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections initialized
2019-07-23 00:35:00.897 UTC [channelCmd] update -> INFO 002 Successfully submitted channel update

for peer0.org2
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp 
CORE_PEER_ADDRESS=peer0.org2.example.com:7051 
CORE_PEER_LOCALMSPID="Org2MSP"   
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt 
export CHANNEL_NAME=mychannel
peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org2MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer channel update -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org2MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
2019-07-23 00:36:39.929 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections initialized
2019-07-23 00:36:39.956 UTC [channelCmd] update -> INFO 002 Successfully submitted channel update

Install the chaincode to 

peer0.Org1 
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp 
CORE_PEER_ADDRESS=peer0.org1.example.com:7051 
CORE_PEER_LOCALMSPID="Org1MSP" 
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt 
peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/
root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/
2019-07-23 00:38:00.559 UTC [chaincodeCmd] checkChaincodeCmdParams -> INFO 001 Using default escc
2019-07-23 00:38:00.559 UTC [chaincodeCmd] checkChaincodeCmdParams -> INFO 002 Using default vscc
2019-07-23 00:38:00.759 UTC [chaincodeCmd] install -> INFO 003 Installed remotely response:<status:200 payload:"OK" > 

peer0.Org2.
CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp 
CORE_PEER_ADDRESS=peer0.org2.example.com:7051 
CORE_PEER_LOCALMSPID="Org2MSP" 
CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt 
peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/
root@73aeb8f57556:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/
2019-07-23 00:39:26.748 UTC [chaincodeCmd] checkChaincodeCmdParams -> INFO 001 Using default escc
2019-07-23 00:39:26.748 UTC [chaincodeCmd] checkChaincodeCmdParams -> INFO 002 Using default vscc
2019-07-23 00:39:26.915 UTC [chaincodeCmd] install -> INFO 003 Installed remotely response:<status:200 payload:"OK" > 

Instantiate Chaincode

peer chaincode instantiate -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n mycc -v 1.0 -c '{"Args":["init","a", "100", "b","200"]}' -P "OR ('Org1MSP.peer','Org2MSP.peer')"
2019-07-23 00:39:58.625 UTC [chaincodeCmd] checkChaincodeCmdParams -> INFO 001 Using default escc
2019-07-23 00:39:58.625 UTC [chaincodeCmd] checkChaincodeCmdParams -> INFO 002 Using default vscc

Query
Lets query for the value of a to make sure the chaincode was properly instantiated and the state DB was populated.

peer chaincode query -C $CHANNEL_NAME -n mycc -c '{"Args":["query","a"]}'
100

Invoke
Now lets move 10 from a to b. This transaction will cut a new block and update the state DB.

peer chaincode invoke -o orderer.example.com:7050  --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem  -C $CHANNEL_NAME -n mycc -c '{"Args":["invoke","a","b","10"]}'
2019-07-23 00:42:01.321 UTC [chaincodeCmd] chaincodeInvokeOrQuery -> INFO 001 Chaincode invoke successful. result: status:200 

Query
LetÕs confirm that our previous invocation executed properly. We initialized the key a with a value of 100 and just removed 10 with our previous invocation. Therefore, a query against a should reveal 90. 

peer chaincode query -C $CHANNEL_NAME -n mycc -c '{"Args":["query","a"]}'
90

exit

./byfn.sh down
docker rm -f $(docker ps -aq)




